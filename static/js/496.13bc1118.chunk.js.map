{"version":3,"file":"static/js/496.13bc1118.chunk.js","mappings":"iPAMe,SAASA,IACtB,IAAQC,GAA0BC,EAAAA,EAAAA,MAA1BD,sBAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAR,gBAAqBJ,MACpB,CAACA,KAGF,UAAC,IAAD,YACE,kCAEA,SAAC,IAAD,CAAkBK,UAAWL,S,uGCb7BM,EAAcC,EAAQ,MAwF5B,IAtFA,YAA0C,IAAdF,EAAa,EAAbA,UACpB,GAAkCG,EAAAA,EAAAA,UAAS,CAC3CC,gBAAiB,GACjBC,iBAAkB,GAClBC,YAAa,GACbC,gBAAiB,GACjBC,aAAc,GACdC,gBAAiB,EACjBC,qBAAsB,EACtBC,mBAAoB,IARxB,eAAKC,EAAL,KAAmBC,EAAnB,KA0DA,OA/CAhB,EAAAA,EAAAA,YAAU,WAEN,IACIiB,EAAS,IADIZ,EAAQ,OAGzBY,EAAOC,GAAG,SAAS,SAAAC,GACflB,QAAQC,IAAI,yBAA2BiB,EAAIC,YAG/CH,EAAOI,IAAIlB,GAAW,SAACmB,GACnB,IAAMC,EAAWC,aAAY,WAAO,IAAD,MAC/BR,EAAgB,CACZN,iBAAqC,IAAnBY,EAAQG,UAAgBC,QAAQ,GAAK,IACvDd,gBAAe,UAAEU,EAAQK,gBAAV,QAAsB,EACrCd,qBAAsBT,EAAW,UAACkB,EAAQM,qBAAT,QAA0B,GAAK,KAChEd,mBAAoBV,EAAW,UAACkB,EAAQO,mBAAT,QAAwB,GAAK,SAEjE,KAEHP,EAAQJ,GAAG,QAAQ,WACfF,EAAgB,CACZN,gBAAiB,SAErBT,QAAQC,IAAI,kBACZ4B,cAAcP,MAGlBP,EAAgB,CACZT,gBAAiBe,EAAQS,SACzBvB,iBAAkBc,EAAQU,UAC1BvB,YAAaa,EAAQW,KACrBtB,aAAcW,EAAQY,QAG1BjC,QAAQC,IAAIoB,EAAQY,OAGpB,IADA,IAAIC,EAAcb,EAAQY,MAAM,GACvBE,EAAI,EAAGA,EAAId,EAAQY,MAAMG,OAAQD,IAClCd,EAAQY,MAAME,GAAGC,OAASF,EAAYE,QAAUf,EAAQY,MAAME,GAAGH,KAAKK,SAAS,UAC/EH,EAAcb,EAAQY,MAAME,IAGpCD,EAAYI,SAAS,oBACrBtC,QAAQC,IAAIiC,QAEjB,CAAChC,KAGA,UAAC,IAAD,CAAWqC,OAAK,EAAhB,WACI,UAAC,IAAD,YACI,SAAC,IAAD,WACI,0BAAOzB,EAAaL,qBAExB,UAAC,IAAD,YACI,SAAC,IAAD,CAAiB+B,KAAMC,EAAAA,MAD3B,IACwC3B,EAAaH,gBADrD,aAGA,UAAC,IAAD,YACI,SAAC,IAAD,CAAiB6B,KAAME,EAAAA,MAD3B,IAC4C5B,EAAaF,yBAEzD,UAAC,IAAD,YACI,SAAC,IAAD,CAAiB4B,KAAMG,EAAAA,MAD3B,IAC0C7B,EAAaD,0BAG3D,SAAC,IAAD,WACI,SAAC,IAAD,WACI,kBAAO+B,GAAG,kBAAkBC,UAAU","sources":["Play.js","WebTorrentPlayer.js"],"sourcesContent":["\r\nimport React, { useEffect } from \"react\";\r\nimport { Container } from 'react-bootstrap';\r\nimport { useParams } from \"react-router-dom\";\r\nimport WebTorrentPlayer from \"./WebTorrentPlayer\";\r\n\r\nexport default function Play() {\r\n  const { magnet_or_torrent_url } = useParams();\r\n\r\n  useEffect(() => {\r\n    console.log(`Play: ${magnet_or_torrent_url}`);\r\n  }, [magnet_or_torrent_url]);\r\n\r\n  return (\r\n    <Container>\r\n      <h2>Play</h2>\r\n\r\n      <WebTorrentPlayer torrentId={magnet_or_torrent_url}></WebTorrentPlayer>\r\n    </Container>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUsers, faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nconst prettyBytes = require('pretty-bytes');\r\n\r\nfunction WebTorrentPlayer({ torrentId }) {\r\n    var [torrentState, setTorrentState] = useState({\r\n        torrentInfoHash: \"\",\r\n        torrentMagnetURI: \"\",\r\n        torrentName: \"\",\r\n        torrentProgress: \"\",\r\n        torrentFiles: [],\r\n        torrentNumPeers: 0,\r\n        torrentDownloadSpeed: 0,\r\n        torrentUploadSpeed: 0,\r\n      });\r\n\r\n    useEffect(() => {\r\n\r\n        var WebTorrent = require('webtorrent/webtorrent.min.js');\r\n        var client = new WebTorrent();\r\n\r\n        client.on('error', err => {\r\n            console.log('[+] Webtorrent error: ' + err.message);\r\n        });\r\n\r\n        client.add(torrentId, (torrent) => {\r\n            const interval = setInterval(() => {\r\n                setTorrentState({\r\n                    torrentProgress: (torrent.progress * 100).toFixed(1) + '%',\r\n                    torrentNumPeers: torrent.numPeers ?? 0,\r\n                    torrentDownloadSpeed: prettyBytes(torrent.downloadSpeed ?? 0) + '/s',\r\n                    torrentUploadSpeed: prettyBytes(torrent.uploadSpeed ?? 0) + '/s',\r\n                });\r\n            }, 500);\r\n\r\n            torrent.on('done', () => {\r\n                setTorrentState({\r\n                    torrentProgress: 100 + '%',\r\n                });\r\n                console.log('Progress: 100%');\r\n                clearInterval(interval);\r\n            })\r\n    \r\n            setTorrentState({\r\n                torrentInfoHash: torrent.infoHash,\r\n                torrentMagnetURI: torrent.magnetURI,\r\n                torrentName: torrent.name,\r\n                torrentFiles: torrent.files,\r\n            });\r\n\r\n            console.log(torrent.files);\r\n            // Find largest file\r\n            var largestFile = torrent.files[0]\r\n            for (var i = 1; i < torrent.files.length; i++) {\r\n                if (torrent.files[i].length > largestFile.length && torrent.files[i].name.endsWith('.mp4')) {\r\n                    largestFile = torrent.files[i]\r\n                }\r\n            }\r\n            largestFile.renderTo('#video-container');\r\n            console.log(largestFile);\r\n        });\r\n    }, [torrentId]);\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <span>{torrentState.torrentProgress}</span>\r\n                </Col>\r\n                <Col>\r\n                    <FontAwesomeIcon icon={faUsers} /> {torrentState.torrentNumPeers} peers\r\n                </Col>\r\n                <Col>\r\n                    <FontAwesomeIcon icon={faArrowDown} /> {torrentState.torrentDownloadSpeed}\r\n                </Col>\r\n                <Col>\r\n                    <FontAwesomeIcon icon={faArrowUp} /> {torrentState.torrentUploadSpeed}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <video id=\"video-container\" className=\"ratio ratio-16x9\">\r\n                        {/* <video id=\"player\"></video> */}\r\n                    </video>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default WebTorrentPlayer;"],"names":["Play","magnet_or_torrent_url","useParams","useEffect","console","log","torrentId","prettyBytes","require","useState","torrentInfoHash","torrentMagnetURI","torrentName","torrentProgress","torrentFiles","torrentNumPeers","torrentDownloadSpeed","torrentUploadSpeed","torrentState","setTorrentState","client","on","err","message","add","torrent","interval","setInterval","progress","toFixed","numPeers","downloadSpeed","uploadSpeed","clearInterval","infoHash","magnetURI","name","files","largestFile","i","length","endsWith","renderTo","fluid","icon","faUsers","faArrowDown","faArrowUp","id","className"],"sourceRoot":""}