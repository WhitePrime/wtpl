{"version":3,"file":"static/js/711.1b75ad1c.chunk.js","mappings":"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","sources":["EpisodeDetails.js","ImdbTitleDetails.js","TorrentList.js"],"sourcesContent":["import './SerieDetails.css';\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ImdbTitleDetails from \"./ImdbTitleDetails\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport constants from './config/constants';\nimport TorrentList from './TorrentList';\n\nexport default function EpisodeDetails() {\n  let params = useParams();\n  const [details, setDetails] = useState([]);\n\n  useEffect(() => {\n    const imdb_id = params.imdb_id;\n    const seasonNumber = params.season.length > 1 ? params.season : \"0\" + params.season;\n    const episodeNumber = params.episode.length > 1 ? params.episode : \"0\" + params.episode;\n\n    const apiUrl = `https://v3-cinemeta.strem.io/meta/series/${imdb_id}.json`;\n    fetch(apiUrl)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n\n        let seasonsDup = data.meta.videos\n          .map(episode => {\n            return episode.season;\n          });\n        console.log(seasonsDup);\n        seasonsDup.sort((a, b) => a - b);\n        // remove duplicates\n        const seasons = [...new Set(seasonsDup)];\n        // if array contains element with value 0 then move it to last position\n        if (seasons.includes(0)) {\n          seasons.push(seasons.splice(seasons.indexOf(0), 1)[0]);\n        }\n\n        console.log(seasons);\n\n        const shareUrl = `${window.location.origin}/series/${data.meta.imdb_id}`;\n        var serie = { ...data.meta, shareUrl, seasons };\n        console.log(serie);\n        setDetails(serie);\n        document.title = `${data.meta.name} S${seasonNumber}E${episodeNumber} - ${constants.SITE_TITLE}`;\n      })\n      .catch(error => console.log(error));\n  }, [params.imdb_id, params.season, params.episode]);\n\n  return (\n    <div \n      className=\"imdb-title-container dark-overlay\" \n      style={{ background: \"linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ), url(\" + details?.background + \")\" }}\n    >\n      <Container>\n        <Row>\n          <Col className=\"\" xs={12} md={6} xl={8}>\n            <ImdbTitleDetails details={details} />\n          </Col>\n          <Col className=\"\" xs={12} md={6} xl={4}>\n            Season {params.season} - Episode {params.episode}\n            \n            <TorrentList serieImdbId={details?.imdb_id} season={params.season} episode={params.episode} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import { Col, Row } from 'react-bootstrap';\nimport './ImdbTitleDetails.css';\n\nexport default function ImdbTitleDetails({ details }) {\n    return (\n        <>\n            <Row>\n                {details?.genre && details.genre.length > 0 &&\n                    <Col xs=\"6\" md=\"12\">\n                        <div className=\"genre-container\">\n                            <h4>Genre</h4>\n                            {details?.genre?.map(function (genre) {\n                                return <span key={genre}>{genre} </span>;\n                            })}\n                        </div>\n                    </Col>\n                }\n                {details?.director && details.director.length > 0 &&\n                    <Col xs=\"6\" md=\"12\">\n                        <div className=\"director-container\">\n                            <h4>Director</h4>\n                            {details?.director?.map(function (director) {\n                                return <span key={director}>{director}&nbsp;</span>;\n                            })}\n                        </div>\n                    </Col>\n                }\n                {details?.writer && details.writer.length > 0 &&\n                    <Col xs=\"6\" md=\"12\">\n                        <div className=\"writer-container\">\n                            <h4>Writer</h4>\n                            {details?.writer?.map(function (writer) {\n                                return <span key={writer}>{writer}&nbsp;</span>;\n                            })}\n                        </div>\n                    </Col>\n                }\n                {details?.cast && details.cast.length > 0 &&\n                    <Col xs=\"6\" md=\"12\">\n                        <div className=\"cast-container\">\n                            <h4>Cast</h4>\n\n                            {details?.cast?.map(function (actor) {\n                                return (<span key={actor}>{actor}&nbsp;</span>);\n                            })}\n                        </div>\n                    </Col>\n                }\n            </Row>\n        </>\n    );\n}\n","\nimport './TorrentList.css';\nimport React, { useEffect, useState } from \"react\";\nimport { Col, Container, Row } from 'react-bootstrap';\n\nexport default function TorrentList({ movieImdbId, serieImdbId, season, episode }) {\n  const [streams, setStreams] = useState([]);\n\n  useEffect(() => {\n      if (movieImdbId) {\n        const apiUrl = `https://torrentio.strem.fun/sort=seeders|qualityfilter=4k/stream/movie/${movieImdbId}.json`;\n        \n        fetch(apiUrl)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                let streams = data.streams.map(stream => {\n                  // check if contains newline\n                  if (stream.title.includes('\\n')) {\n                    return {\n                      ...stream,\n                      title: stream.title.split('\\n')[0],\n                      subtitle: stream.title.split('\\n')[1],\n                    };\n                  }\n                  return stream;\n              });\n              setStreams(streams);\n            })\n            .catch(error => console.log(error));\n      } else {\n        const apiUrl = `https://torrentio.strem.fun/sort=seeders|qualityfilter=4k/stream/series/${serieImdbId}:${season}:${episode}.json`\n        \n        fetch(apiUrl)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                let streams = data.streams.map(stream => {\n                    // check if contains newline\n                    if (stream.title.includes('\\n')) {\n                      return {\n                        ...stream,\n                        title: stream.title.split('\\n')[0],\n                        subtitle: stream.title.split('\\n')[1],\n                      };\n                    }\n                    return stream;\n                });\n                setStreams(streams);\n            })\n            .catch(error => console.log(error));\n      }\n  }, [movieImdbId, serieImdbId, season, episode]);\n\n  return (\n    <>\n      <h2>Torrents</h2>\n      <Container id='torrentList'>\n        {streams.map(stream => (\n            <Row className='torrentInfo' key={stream.infoHash}>\n                <Col xs='12'>\n                  <a className=\"torrentLink text-white\" href={\"magnet:?xt=urn:btih:\" + stream.infoHash} target='_blank' rel='noopener noreferrer'>\n                      {stream.title}\n                      {stream.subtitle && <span className='torrentSubtitle'><br />{stream.subtitle}</span>}\n                  </a>\n                </Col>\n            </Row>\n        ))}\n      </Container>\n    </>\n  );\n}\n"],"names":["EpisodeDetails","params","useParams","useState","details","setDetails","useEffect","imdb_id","seasonNumber","season","length","episodeNumber","episode","apiUrl","fetch","then","response","json","data","console","log","seasonsDup","meta","videos","map","sort","a","b","seasons","Set","includes","push","splice","indexOf","shareUrl","window","location","origin","serie","document","title","name","constants","catch","error","className","style","background","xs","md","xl","serieImdbId","ImdbTitleDetails","Row","genre","Col","director","writer","cast","actor","TorrentList","movieImdbId","streams","setStreams","stream","split","subtitle","Container","id","href","infoHash","target","rel"],"sourceRoot":""}