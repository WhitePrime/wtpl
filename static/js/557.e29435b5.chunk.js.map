{"version":3,"file":"static/js/557.e29435b5.chunk.js","mappings":"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","sources":["SocialButtons.js","ImdbTitleDetails.js","MovieDetails.js","TorrentList.js"],"sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLink } from '@fortawesome/free-solid-svg-icons'\r\nimport { faWhatsapp, faFacebook, faTwitter } from '@fortawesome/free-brands-svg-icons'\r\nimport './SocialButtons.css';\r\n\r\nexport default function SocialButtons({ shareUrl }) {\r\n   return (\r\n    <div className=\"social-buttons-wrapper\">\r\n        <a className=\"btn btn-circle\" href={`https://api.whatsapp.com/send?text=${shareUrl}`}>\r\n            <FontAwesomeIcon icon={faWhatsapp} size=\"lg\" />\r\n        </a>\r\n        <a className=\"btn btn-circle\" href={`https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`}>\r\n            <FontAwesomeIcon icon={faFacebook} size=\"lg\" />\r\n        </a>       \r\n        <a className=\"btn btn-circle\" href={`https://twitter.com/intent/tweet?text=${shareUrl}`}>\r\n            <FontAwesomeIcon icon={faTwitter} size=\"lg\" />\r\n        </a>\r\n        <button className=\"btn btn-circle\" onClick={() => navigator.clipboard.writeText(shareUrl)}>\r\n            <FontAwesomeIcon icon={faLink} size=\"lg\" />\r\n        </button>\r\n    </div>\r\n  );\r\n}","import './ImdbTitleDetails.css';\r\nimport SocialButtons from './SocialButtons';\r\n\r\nexport default function ImdbTitleDetails({details}) {\r\n  return (\r\n      <div>\r\n\r\n        <h2>{details?.logo ? <img className=\"imdb-logo\" src={details?.logo} alt={details?.name}></img> : details?.name}</h2>\r\n        \r\n        <SocialButtons shareUrl={details.shareUrl} />\r\n\r\n        <p>\r\n          {details?.runtime && \r\n            <span>{details?.runtime} | </span>\r\n          } \r\n          <span>{details?.year} | </span>          \r\n          <span>IMDB rating: {details?.imdbRating}</span>\r\n        </p>\r\n        \r\n        {details?.genre && details.genre.length > 0 &&\r\n            <div className=\"genre-container\">\r\n                <h3>Genre</h3>\r\n                {details?.genre?.map(function(genre) {\r\n                    return <span key={genre}>{genre} </span>;\r\n                })}\r\n            </div>\r\n        }\r\n\r\n        {details?.director && details.director.length > 0 &&\r\n            <div className=\"director-container\">\r\n                <h3>Director</h3>\r\n                {details?.director?.map(function(director) {\r\n                    return <span key={director}>{director}&nbsp;</span>;\r\n                })}\r\n            </div>\r\n        }\r\n\r\n        {details?.writer && details.writer.length > 0 &&\r\n            <div className=\"writer-container\">   \r\n                <h3>Writer</h3>\r\n                {details?.director?.map(function(director) {\r\n                    return <span key={director}>{director}&nbsp;</span>;\r\n                })}\r\n            </div>\r\n        }\r\n\r\n        {details?.cast && details.cast.length > 0 &&\r\n        <div className=\"cast-container\">\r\n            <h3>Cast</h3>\r\n\r\n            {details?.cast?.map(function(actor) {\r\n                return (<span key={actor}>{actor}&nbsp;</span>);\r\n            })}\r\n            </div>\r\n        }\r\n      </div>\r\n  );\r\n}\r\n","import './MovieDetails.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ImdbTitleDetails from \"./ImdbTitleDetails\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport constants from './config/constants';\r\nimport TorrentList from './TorrentList';\r\n\r\nexport default function MovieDetails() {\r\n  let params = useParams();\r\n  const [details, setDetails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const imdb_id = params.imdb_id;\r\n    const query = `{\"params\":[null,{\"query\":{\"imdb_id\":\"${imdb_id}\"}}],\"method\":\"meta.get\",\"id\":1,\"jsonrpc\":\"2.0\"}`;\r\n    console.log(query);\r\n    const apiUrl = `https://cinemeta.strem.io/stremioget/stremio/v1/q.json?b=${btoa(query)}`;\r\n    fetch(apiUrl)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        setDetails({ ...data.result, shareUrl: `${window.location.origin}/movies/${data.result.imdb_id}` });\r\n        document.title = `${data.result.name} - ${constants.SITE_TITLE}`;\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, [params.imdb_id]);\r\n\r\n  return (\r\n    <div className=\"imdb-title-container dark-overlay\" style={{ background: \"linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ), url(\" + details?.background + \")\" }}>\r\n      <Container>\r\n        <Row>\r\n          <Col xs=\"6\">\r\n            <ImdbTitleDetails details={details} />\r\n          </Col>\r\n          <Col xs=\"6\">\r\n            <TorrentList movieImdbId={details?.imdb_id} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport './TorrentList.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\nexport default function TorrentList({ movieImdbId, serieImdbId, season, episode }) {\r\n  const [streams, setStreams] = useState([]);\r\n\r\n  useEffect(() => {\r\n      if (movieImdbId) {\r\n        const apiUrl = `https://torrentio.strem.fun/qualityfilter=4k/stream/movie/${movieImdbId}.json`;\r\n        \r\n        fetch(apiUrl)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                let streams = data.streams.map(stream => {\r\n                  // check if contains newline\r\n                  if (stream.title.includes('\\n')) {\r\n                    return {\r\n                      ...stream,\r\n                      title: stream.title.split('\\n')[0],\r\n                      subtitle: stream.title.split('\\n')[1],\r\n                    };\r\n                  }\r\n                  return stream;\r\n              });\r\n              setStreams(streams);\r\n            })\r\n            .catch(error => console.log(error));\r\n      } else {\r\n        const apiUrl = `https://torrentio.strem.fun/qualityfilter=4k/stream/series/${serieImdbId}:${season}:${episode}.json`\r\n        \r\n        fetch(apiUrl)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                let streams = data.streams.map(stream => {\r\n                    // check if contains newline\r\n                    if (stream.title.includes('\\n')) {\r\n                      return {\r\n                        ...stream,\r\n                        title: stream.title.split('\\n')[0],\r\n                        subtitle: stream.title.split('\\n')[1],\r\n                      };\r\n                    }\r\n                    return stream;\r\n                });\r\n                setStreams(streams);\r\n            })\r\n            .catch(error => console.log(error));\r\n      }\r\n  }, [movieImdbId, serieImdbId, season, episode]);\r\n\r\n  return (\r\n    <>\r\n      <h2>Torrents</h2>\r\n      <Container id='torrentList'>\r\n        {streams.map(stream => (\r\n            <Row className='torrentInfo' key={stream.infoHash}>\r\n                <Col xs='12'>\r\n                    <Link className=\"torrentLink text-white\" to={`/play/${stream.infoHash}`}>\r\n                      {stream.title}\r\n                      {stream.subtitle && <span className='torrentSubtitle'><br />{stream.subtitle}</span>}\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n"],"names":["SocialButtons","shareUrl","className","href","icon","faWhatsapp","size","faFacebook","faTwitter","onClick","navigator","clipboard","writeText","faLink","ImdbTitleDetails","details","logo","src","alt","name","runtime","year","imdbRating","genre","length","map","director","writer","cast","actor","MovieDetails","params","useParams","useState","setDetails","useEffect","imdb_id","query","console","log","apiUrl","btoa","fetch","then","response","json","data","result","window","location","origin","document","title","constants","catch","error","style","background","Container","Row","Col","xs","TorrentList","movieImdbId","serieImdbId","season","episode","streams","setStreams","stream","includes","split","subtitle","id","to","infoHash"],"sourceRoot":""}